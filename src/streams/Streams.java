package streams;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.function.IntSupplier;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Streams {

    public static void main(String[] args) {

        // { Stream.of } -> Returns a sequential ordered stream whose elements are the specified values
        Stream<Integer> oneTwoThree = Stream.of(2, 3, 4);
        Stream<String> texts = Stream.of("hi", "hello");

        oneTwoThree.forEach(System.out::println);
        // The below line throws exception as 'streams' are single threaded operation
        // oneTwoThree.forEach(System.out::println);

        IntStream.of(2,5,2,3,0,4).forEach(System.out::print);

        // ArrayList - > Stream
        ArrayList<Integer> modifiableList = new ArrayList<>(List.of(1,2,4));
        modifiableList.stream().forEach(System.out::println);

        // Array -> Stream
        int[]  elems = {4,6,-34};
        Arrays.stream(elems).forEach(System.out::println);

        // Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier.
        int[] value = {0};
        IntStream.generate(() -> ++value[0]).limit(100).forEach(System.out::println);

        IntStream.generate(new IntSupplier() {
            int value = 0;
            @Override
            public int getAsInt() {
                return ++value;
            }
        }).skip(14).limit(50).forEach(System.out::println);

        IntStream.iterate(0, n -> n+1).limit(3).forEach(System.out::println);

        IntStream.iterate(0, n -> n + 1).limit(20).map(n -> n * 2).forEach(System.out::println);

        // Stream<String> ---> Stream<Integer>
        Stream.of("Hi", "hello", "World").map(txt -> txt.length()).forEach(System.out::println);

        // Range
        IntStream.range(0, 100)
                .takeWhile(n -> n < 45)
                .forEach(System.out::println);

        // IntStream --> storing into int[] array
        System.out.println("IntStream --> storing into int[] array :-");
        int[] array = IntStream.iterate(1, n -> n + 1).limit(10).toArray();
        System.out.println(Arrays.toString(array));

        String[] stringArr = Stream.of("Hi", "helo", "world").toArray(String[]::new);
        System.out.println(Arrays.toString(stringArr));

        IntStream.iterate(1, n-> n+1).flatMap(n -> IntStream.of(n,n)).limit(5).forEach(System.out::println);

        boolean allMatch = Stream.generate(() -> ThreadLocalRandom.current().nextInt()).parallel().limit(1000).allMatch(n -> n % 1000 == 0);
        System.out.println(allMatch);
    }
}
